#!/usr/bin/env node

/**
 * Script de test WebSocket pour Render
 * Usage: node scripts/test-websocket.js [USER_ID]
 */

const WebSocket = require('ws');

// Configuration
const BASE_URL = process.env.NEXT_PUBLIC_WS_URL || 'wss://marketplace-greentech.onrender.com';
const API_URL = process.env.NEXT_PUBLIC_API_URL || 'https://marketplace-greentech.onrender.com';
const USER_ID = process.argv[2] || '1';
const TEST_TOKEN = process.argv[3] || '';

console.log('Test de connectivit√© WebSocket pour Render\n');

/**
 * Test de l'API HTTP d'abord
 */
async function testHttpApi() {
  console.log('Test de l\'API HTTP...');
  
  try {
    const startTime = Date.now();
    const response = await fetch(`${API_URL}/graphql/`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ 
        query: '{ __schema { types { name } } }' 
      })
    });
    
    const latency = Date.now() - startTime;
    
    if (response.ok) {
      console.log(`API accessible (${latency}ms)`);
      return true;
    } else {
      console.log(`API erreur: ${response.status} ${response.statusText}`);
      return false;
    }
  } catch (error) {
    console.log(`API inaccessible: ${error.message}`);
    return false;
  }
}

/**
 * Test de la connexion WebSocket
 */
function testWebSocket() {
  return new Promise((resolve) => {
    console.log('\nüîå Test de la connexion WebSocket...');
    
    const wsUrl = `${BASE_URL}/ws/messages/${USER_ID}/` + 
                  (TEST_TOKEN ? `?token=${encodeURIComponent(TEST_TOKEN)}` : '');
    
    console.log(`URL: ${wsUrl.replace(/token=[^&]+/, 'token=***')}`);
    
    const ws = new WebSocket(wsUrl);
    const startTime = Date.now();
    let resolved = false;
    
    // Timeout de 30 secondes
    const timeout = setTimeout(() => {
      if (!resolved) {
        resolved = true;
        console.log('‚è∞ Timeout de connexion (30s)');
        ws.close();
        resolve(false);
      }
    }, 30000);
    
    ws.on('open', () => {
      if (!resolved) {
        resolved = true;
        clearTimeout(timeout);
        const latency = Date.now() - startTime;
        console.log(`WebSocket connect√© (${latency}ms)`);
        
        // Test d'envoi de message
        try {
          ws.send(JSON.stringify({ type: 'ping' }));
          console.log('Ping envoy√©');
        } catch (error) {
          console.log(`Erreur envoi ping: ${error.message}`);
        }
        
        // Fermer apr√®s 2 secondes
        setTimeout(() => {
          ws.close();
          resolve(true);
        }, 2000);
      }
    });
    
    ws.on('message', (data) => {
      try {
        const message = JSON.parse(data);
        console.log(`Message re√ßu: ${message.type || 'unknown'}`);
      } catch (error) {
        console.log(`Message re√ßu (raw): ${data}`);
      }
    });
    
    ws.on('error', (error) => {
      if (!resolved) {
        resolved = true;
        clearTimeout(timeout);
        console.log(`Erreur WebSocket: ${error.message}`);
        resolve(false);
      }
    });
    
    ws.on('close', (code, reason) => {
      if (!resolved) {
        resolved = true;
        clearTimeout(timeout);
        console.log(`WebSocket ferm√©: ${code} - ${reason || 'Pas de raison'}`);
        resolve(code === 1000);
      }
    });
  });
}

/**
 * Test de r√©veil du service
 */
async function wakeUpService() {
  console.log('Tentative de r√©veil du service...');
  
  const maxAttempts = 3;
  for (let i = 1; i <= maxAttempts; i++) {
    console.log(`   Tentative ${i}/${maxAttempts}...`);
    
    const success = await testHttpApi();
    if (success) {
      console.log('Service r√©veill√©');
      return true;
    }
    
    if (i < maxAttempts) {
      console.log('   Attente 5 secondes...');
      await new Promise(resolve => setTimeout(resolve, 5000));
    }
  }
  
  console.log('Impossible de r√©veiller le service');
  return false;
}

/**
 * Fonction principale
 */
async function main() {
  console.log(`Configuration:`);
  console.log(`  API URL: ${API_URL}`);
  console.log(`  WebSocket URL: ${BASE_URL}`);
  console.log(`  User ID: ${USER_ID}`);
  console.log(`  Token: ${TEST_TOKEN ? 'Fourni' : 'Non fourni'}`);
  console.log('');
  
  // 1. Tester l'API HTTP
  const apiWorking = await testHttpApi();
  
  if (!apiWorking) {
    // Tenter de r√©veiller le service
    const wakeUpSuccess = await wakeUpService();
    if (!wakeUpSuccess) {
      console.log('\n‚ùå Test √©chou√©: API inaccessible');
      process.exit(1);
    }
  }
  
  // 2. Attendre un peu pour que le service soit pr√™t
  console.log('\n‚è≥ Attente 3 secondes pour que le service soit pr√™t...');
  await new Promise(resolve => setTimeout(resolve, 3000));
  
  // 3. Tester WebSocket
  const wsWorking = await testWebSocket();
  
  // 4. R√©sum√©
  console.log('\nüìä R√©sum√© des tests:');
  console.log(`  API HTTP: ${apiWorking ? '‚úÖ OK' : '‚ùå √âchec'}`);
  console.log(`  WebSocket: ${wsWorking ? '‚úÖ OK' : '‚ùå √âchec'}`);
  
  if (apiWorking && wsWorking) {
    console.log('\nüéâ Tous les tests sont pass√©s !');
    process.exit(0);
  } else {
    console.log('\n‚ùå Certains tests ont √©chou√©');
    console.log('\nüí° Suggestions:');
    
    if (!apiWorking) {
      console.log('  ‚Ä¢ V√©rifiez que le service Django est d√©marr√© sur Render');
      console.log('  ‚Ä¢ V√©rifiez les variables d\'environnement');
    }
    
    if (!wsWorking) {
      console.log('  ‚Ä¢ V√©rifiez que Redis est configur√© et actif');
      console.log('  ‚Ä¢ V√©rifiez la configuration ASGI/Daphne');
      console.log('  ‚Ä¢ Le service peut √™tre en cours de r√©veil (plan gratuit)');
    }
    
    process.exit(1);
  }
}

// Gestion des erreurs non captur√©es
process.on('unhandledRejection', (error) => {
  console.error('‚ùå Erreur non g√©r√©e:', error.message);
  process.exit(1);
});

// Ex√©cuter le script
if (require.main === module) {
  main().catch(error => {
    console.error('‚ùå Erreur fatale:', error.message);
    process.exit(1);
  });
}
